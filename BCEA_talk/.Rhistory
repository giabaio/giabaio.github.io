source("~/Dropbox/HE/Ispor/Workshop_Modelling_R/BCEA_talk/assets/setup.R")
install.packages("chromote")
remotes::install_github("rstudio/chromote")
install.packages("websocket")
remotes::install_github("rstudio/chromote")
install.packages(c("progress", "jsonlite", "pdftools", "digest"))
install.packages(c("progress", "jsonlite", "pdftools", "digest"))
xaringan_to_pdf("http://www.statistica.it/gianluca/slides/bcea",output_file = "~/Desktop/BCEA.pdf",include_partial_slides = TRUE)
xaringan_to_pdf("http://www.statistica.it/gianluca/slides/bcea",output_file = "~/Desktop/BCEA.pdf",include_partial_slides = FALSE)
xaringan_to_pdf("http://www.statistica.it/gianluca/slides/bcea",output_file = "~/Desktop/BCEA.pdf",include_partial_slides = TRUE, delay = 5)
ls
xaringan_to_pdf("BCEA.html",output_file = "~/Desktop/BCEA.pdf",include_partial_slides = FALSE)
xaringan_to_pdf <- function(
input,
output_file = NULL,
delay = 1,
include_partial_slides = FALSE
) {
if (!requireNamespace("chromote", quietly = TRUE)) {
stop("`chromote` is required: devtools::install_github('rstudio/chromote')")
}
required_packages <- c("progress", "jsonlite", "pdftools", "digest", "fs")
for (pkg in required_packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
stop("`", pkg, "` is required: install.packages('", pkg, "')")
}
}
is_url <- grepl("^(ht|f)tp", tolower(input))
if (is.null(output_file)) {
if (is_url) {
output_file <- fs::path_ext_set(fs::path_file(input), "pdf")
} else {
output_file <- fs::path_ext_set(input, "pdf")
}
}
if (!is_url && !grepl("^file://", input)) {
if (!tolower(fs::path_ext(input)) %in% c("htm", "html")) {
stop("`input` must be the HTML version of the slides.")
}
input <- paste0("file://", fs::path_abs(input))
}
b <- chromote::ChromoteSession$new()
on.exit(b$close(), add = TRUE)
b$Page$navigate(input, wait_ = TRUE)
b$Page$loadEventFired()
has_remark <- b$Runtime$evaluate("typeof slideshow !== 'undefined'")$result$value
if (!has_remark) {
stop("Input does not appear to be xaringan slides: ", input)
}
current_slide <- function() {
x <- b$Runtime$evaluate("slideshow.getCurrentSlideIndex()")$result$value
as.integer(x) + 1L
}
slide_is_continuation <- function() {
b$Runtime$evaluate(
"document.querySelector('.remark-visible').matches('.has-continuation')"
)$result$value
}
hash_current_slide <- function() {
digest::digest(b$Runtime$evaluate(
"document.querySelector('.remark-visible').innerHTML"
)$result$value)
}
get_ratio <- function() {
r <- b$Runtime$evaluate('slideshow.getRatio()')$result$value
r <- lapply(strsplit(r, ":"), as.integer)
width <- r[[1]][1]
height <- r[[1]][2]
page_width <- 8/width * width
list(
width = as.integer(908 * width / height),
height = 681L,
page = list(width = page_width, height = page_width * height / width)
)
}
slide_size <- get_ratio()
expected_slides <- as.integer(
b$Runtime$evaluate("slideshow.getSlideCount()")$result$value
)
max_slides <- expected_slides * 4
b$Browser$setWindowBounds(1, bounds = list(
width = slide_size$width,
height = slide_size$height
))
b$Emulation$setEmulatedMedia("print")
b$Runtime$evaluate(paste0(
"let style = document.createElement('style')\n",
"style.innerText = '@media print { ",
".remark-slide-container:not(.remark-visible){ display:none; }",
if (include_partial_slides) " .has-continuation { display: block }",
"}'\n",
"document.head.appendChild(style)"
))
pb <- progress::progress_bar$new(
format = "Slide :slide (:part) [:bar] Eta: :eta",
total = expected_slides
)
idx_slide <- current_slide()
last_hash <- ""
idx_part <- 0L
pdf_files <- c()
for (i in seq_len(max_slides)) {
if (i > 1) {
b$Input$dispatchKeyEvent(
"rawKeyDown",
windowsVirtualKeyCode = 39,
code = "ArrowRight",
key = "ArrowRight",
wait_ = TRUE
)
}
if (current_slide() == idx_slide) {
step <- 0L
idx_part <- idx_part + 1L
} else {
step <- 1L
idx_part <- 1L
}
idx_slide <- current_slide()
pb$tick(step, tokens = list(slide = idx_slide, part = idx_part))
if (!isTRUE(include_partial_slides) && slide_is_continuation()) next
Sys.sleep(delay)
this_hash <- hash_current_slide()
if (identical(last_hash, this_hash)) break
last_hash <- this_hash
pdf_file_promise <- b$Page$printToPDF(
landscape = TRUE,
printBackground = TRUE,
paperWidth = 12,
paperHeight = 9,
marginTop = 0,
marginRight = 0,
marginBottom = 0,
marginLeft = 0,
pageRanges = "1",
preferCSSPageSize = TRUE,
wait_ = FALSE
)$then(function(value) {
filename <- tempfile(fileext = ".pdf")
writeBin(jsonlite::base64_dec(value$data), filename)
filename
})
pdf_files <- c(pdf_files, b$wait_for(pdf_file_promise))
}
pdftools::pdf_combine(pdf_files, output = output_file)
fs::file_delete(pdf_files)
invisible(output_file)
}
input="http://www.statistica.it/gianluca/slides/bcea"
output_file="~/Desktop/BCEA.pdf"
delay=1
include_partial_slides=TRUE
if (!requireNamespace("chromote", quietly = TRUE)) {
stop("`chromote` is required: devtools::install_github('rstudio/chromote')")
}
required_packages <- c("progress", "jsonlite", "pdftools", "digest", "fs")
for (pkg in required_packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
stop("`", pkg, "` is required: install.packages('", pkg, "')")
}
}
is_url <- grepl("^(ht|f)tp", tolower(input))
is_url
is.null(output_file)
fs::path_ext_set(input, "pdf")
fs::path_ext_set(fs::path_file(input), "pdf")
!is_url && !grepl("^file://", input)
paste0("file://", fs::path_abs(input))
b <- chromote::ChromoteSession$new()
b
on.exit(b$close(), add = TRUE)
b$Page$navigate(input, wait_ = TRUE)
b$Page$loadEventFired()
has_remark <- b$Runtime$evaluate("typeof slideshow !== 'undefined'")$result$value
has_remark
current_slide <- function() {
x <- b$Runtime$evaluate("slideshow.getCurrentSlideIndex()")$result$value
as.integer(x) + 1L
}
slide_is_continuation <- function() {
b$Runtime$evaluate(
"document.querySelector('.remark-visible').matches('.has-continuation')"
)$result$value
}
hash_current_slide <- function() {
digest::digest(b$Runtime$evaluate(
"document.querySelector('.remark-visible').innerHTML"
)$result$value)
}
get_ratio <- function() {
r <- b$Runtime$evaluate('slideshow.getRatio()')$result$value
r <- lapply(strsplit(r, ":"), as.integer)
width <- r[[1]][1]
height <- r[[1]][2]
page_width <- 8/width * width
list(
width = as.integer(908 * width / height),
height = 681L,
page = list(width = page_width, height = page_width * height / width)
)
}
slide_size <- get_ratio()
expected_slides <- as.integer(
b$Runtime$evaluate("slideshow.getSlideCount()")$result$value
)
expected_slides
max_slides <- expected_slides * 4
b$Browser$setWindowBounds(1, bounds = list(
width = slide_size$width,
height = slide_size$height
))
b$Emulation$setEmulatedMedia("print")
b$Runtime$evaluate(paste0(
"let style = document.createElement('style')\n",
"style.innerText = '@media print { ",
".remark-slide-container:not(.remark-visible){ display:none; }",
if (include_partial_slides) " .has-continuation { display: block }",
"}'\n",
"document.head.appendChild(style)"
))
b
pb <- progress::progress_bar$new(
format = "Slide :slide (:part) [:bar] Eta: :eta",
total = expected_slides
)
idx_slide <- current_slide()
last_hash <- ""
idx_part <- 0L
pdf_files <- c()
seq_len(max_slides)
for (i in seq_len(max_slides)) {
if (i > 1) {
b$Input$dispatchKeyEvent(
"rawKeyDown",
windowsVirtualKeyCode = 39,
code = "ArrowRight",
key = "ArrowRight",
wait_ = TRUE
)
}
if (current_slide() == idx_slide) {
step <- 0L
idx_part <- idx_part + 1L
} else {
step <- 1L
idx_part <- 1L
}
idx_slide <- current_slide()
pb$tick(step, tokens = list(slide = idx_slide, part = idx_part))
if (!isTRUE(include_partial_slides) && slide_is_continuation()) next
Sys.sleep(delay)
this_hash <- hash_current_slide()
if (identical(last_hash, this_hash)) break
last_hash <- this_hash
pdf_file_promise <- b$Page$printToPDF(
landscape = TRUE,
printBackground = TRUE,
paperWidth = 12,
paperHeight = 9,
marginTop = 0,
marginRight = 0,
marginBottom = 0,
marginLeft = 0,
pageRanges = "1",
preferCSSPageSize = TRUE,
wait_ = FALSE
)$then(function(value) {
filename <- tempfile(fileext = ".pdf")
writeBin(jsonlite::base64_dec(value$data), filename)
filename
})
pdf_files <- c(pdf_files, b$wait_for(pdf_file_promise))
}
library(xaringanBuilder)
build_pdf("BCEA.html","~/Desktop/BCEA.pdf",complex_slides = TRUE,delay = 2)
build_pdf("BCEA.html","~/Desktop/BCEA.pdf",complex_slides = TRUE,delay = 2, partial_slides = TRUE)
install.packages("BCEA",lib=tmp_lib)
# Installs the old version (CRAN) of BCEA so it can be used NB: ONLY DO THIS ONCE!
#tmp_lib="~/Dropbox/HE/Ispor/Workshop_Modelling_R/BCEA/tmp"
#dir.create(tmp_lib)
#install.packages("BCEA",lib=tmp_lib)
tmp_lib="~/Dropbox/HE/Ispor/Workshop_Modelling_R/BCEA/tmp"
install.packages("BCEA",lib=tmp_lib)
# Installs the old version (CRAN) of BCEA so it can be used NB: ONLY DO THIS ONCE!
#tmp_lib="~/Dropbox/HE/Ispor/Workshop_Modelling_R/BCEA/tmp"
#dir.create(tmp_lib)
#install.packages("BCEA",lib=tmp_lib)
tmp_lib="~/Dropbox/HE/Ispor/Workshop_Modelling_R/BCEA_talk/tmp"
install.packages("BCEA",lib=tmp_lib)
build_pdf("BCEA.html",complex_slides = TRUE)
build_pdf("BCEA.html",complex_slides = TRUE,partial_slides = TRUE)
remotes::install_github("jhelvy/xaringanBuilder")
install.packages("av")
install.packages("av")
remotes::install_github("jhelvy/xaringanBuilder")
xaringanBuilder::build_pdf("BCEA.html",complex_slides = T)
xaringanBuilder::build_pdf("http://www.statistica.it/gianluca/slides/bcea/",complex_slides = T)
xaringanBuilder::build_pdf("http://www.statistica.it/gianluca/slides/bcea/index.html",complex_slides = T)
xaringanBuilder::build_html("http://www.statistica.it/gianluca/slides/bcea/",output_file = "~/Desktop/bcea.html")
xaringanBuilder::build_html("BCEA.Rmd",output_file = "~/Desktop/bcea.html")
xaringanBuilder::build_pdf("BCEA.Rmd",complex_slides = T)
xaringanBuilder::build_pptx("http://www.statistica.it/gianluca/slides/bcea/index.html",complex_slides = T)
xaringan:::inf_mr()
xaringan:::inf_mr()
remotes::install_github("jhelvy/xaringanBuilder")
library(xaringanBuilder)
build_pdf("BCEA.Rmd")
build_pdf("BCEA.html")
build_pdf("BCEA.html",complex_slides = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
